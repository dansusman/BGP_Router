#!/usr/bin/env python3

import argparse, socket, json, select, copy
from typing import Dict, List

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
    routes = None
    updates = None
    relations = None
    sockets = None
    forwarding_table = None

    def __init__(self, asn: str, networks: List[Dict[str, str]]):
        # map from port to list of IP addresses it can reach
        self.routes = {}
        # cached copy of update announcement (whole packets)
        self.updates = []
        # map from ip address to type of relationship
        self.relations = {}
        # map from ip address to connection object
        self.sockets = {}
        # array of map<string, string> from description to IP address
        self.forwarding_table = []
        # this router's Autonomous System Number
        self.asn = asn
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        return outroutes

    def get_shortest_as_path(self, routes) -> List[str]:
        """ select the route with the shortest AS Path """
        if len(routes) <= 0:
            return []
        
        shortest_path = [routes[0]]
        min_path = len(routes[0][APTH])
        for route in routes:
            r_len = len(route[APTH])
            if r_len < min_path:
                min_path = r_len
                shortest_path = [route]
            elif r_len == min_path:
                shortest_path.append(route)
     
        return shortest_path
            
    def get_highest_preference(self, routes):
        """ select the route with the highesr localPref """
        if len(routes) <= 0:
            return []
        
        highest_lprf_route = [routes[0]]
        highest_lprf = int(routes[0][LPRF])
        for route in routes:
            r_lprf = int(route[LPRF])
            if r_lprf > highest_lprf:
                highest_lprf = r_lprf
                highest_lprf_route = [route]
            elif r_lprf == highest_lprf:
                highest_lprf_route.append(route)
     
        return highest_lprf_route
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        if len(routes) <= 0:
            return []
        
        return list(filter(lambda r: (self.forwarding_table[r][SORG] == "True"), routes))

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        igp_routes = list(filter(lambda r: (self.forwarding_table[r][ORIG] == "IGP"), routes))
        egp_routes = list(filter(lambda r: (self.forwarding_table[r][ORIG] == "EGP"), routes))
        unk_routes = list(filter(lambda r: (self.forwarding_table[r][ORIG] == "UNK"), routes))

        if igp_routes != []:
            return igp_routes
        elif egp_routes != []:
            return egp_routes

        return unk_routes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        rel = self.relations[srcif]
        for route in routes:
            opp_rel = self.relations[route[NTWK]]
            if (rel == CUST or opp_rel == CUST) or (rel == PROV and opp_rel == PROV):
                outroutes.append(route)

        return outroutes
        
    def get_lowest_ip(self, routes):
        """ select route with the lowest ip address """
        outroutes = []
        min_ip = "255.255.255.255"
        for route in routes:
            r_ip = route[PEER]
            if self.compare_ip(min_ip, r_ip) == 1:
                min_ip = r_ip
                outroutes = [route]
            elif self.compare_ip(min_ip, r_ip) == 0:
                outroutes.append(route)

        return outroutes

    def compare_ip(curr_ip, peer):
        curr_nums = map(int, curr_ip.split("."))
        peer_nums = map(int, peer.split("."))

        for i in range(4):
            if curr_nums[i] > peer_nums[i]:
                return 1
            elif curr_nums[i] < peer_nums[i]:
                return -1
            
        return 0

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routers(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip(routes)
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet) -> bool:
        """	Forward a data packet	"""
        # TODO
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet) -> bool:
        """    handle update packets    """
        packet["srcif"] = srcif
        self.updates.append(packet)
        packetMessage = packet[MESG]
        self.forwarding_table.append({
            # NTWK
            NTWK: packetMessage[NTWK],
            # NMSK
            NMSK: packetMessage[NMSK],
            # PEER IP
            PEER: packet[SRCE],
            # Local Pref
            LPRF: packetMessage[LPRF],
            # Self Origin
            SORG: packetMessage[SORG],
            # AS Path
            APTH: packetMessage[APTH],
            # Origin
            ORIG: packetMessage[ORIG]
        })
        source_relationship = self.relations[srcif]
        copy_of_packet = copy.deepcopy(packet)
        # copy_of_packet[SRCE] = packet[DEST]
        copy_of_packet[MESG][APTH].append(int(self.asn))
        # for (network, socket) in self.sockets.items():
        #     copy_of_packet[DEST] = ('.').join(network.split('.', 3)[:3]) + '.1'
        #     sending_msg = json.dumps(copy_of_packet).encode()
        #     if source_relationship == CUST or self.relations[network] == CUST:
        #         # send updates to all other neighbors (everyone but me)
        #         if source_relationship == CUST and network != srcif:
        #             socket.send(sending_msg)
        #         elif self.relations[network] not in [PROV,PEER] and network != srcif:
        #             socket.send(sending_msg)

        if source_relationship == CUST:
            for neighbor in self.sockets.keys():
                if neighbor != srcif:
                    copy_of_packet[SRCE] = ('.').join(neighbor.split('.', 3)[:3]) + '.1'
                    copy_of_packet[DEST] = neighbor
                    sending_msg = json.dumps(copy_of_packet).encode()
                    print(sending_msg)
                    self.sockets[neighbor].sendall(sending_msg)
        else:
            for neighbor in self.sockets.keys():
                 if neighbor != srcif and self.relations[neighbor] not in [PROV,PEER]:
                    copy_of_packet[SRCE] = ('.').join(neighbor.split('.', 3)[:3]) + '.1'
                    copy_of_packet[DEST] = neighbor
                    sending_msg = json.dumps(copy_of_packet).encode()
                    print(sending_msg)
                    self.sockets[neighbor].sendall(sending_msg)

        return True

    def revoke(self, packet) -> bool:
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet) -> bool:
        """Handles dump table requests by crafting a table message."""
        dump_msg = {}
        dump_msg[SRCE] = packet[DEST]
        dump_msg[DEST] = packet[SRCE]
        dump_msg[TYPE] = TABL
        dump_msg[MESG] = {}
        dump_msg[MESG][NTWK] = self.forwarding_table[NTWK]
        dump_msg[MESG][NMSK] = self.forwarding_table[NMSK]
        dump_msg[MESG][PEER] = self.forwarding_table[PEER]
        sending_msg = json.dumps(dump_msg).encode()
        # send table response to original source (who requested the dump data)
        print(sending_msg)
        self.sockets[packet[DEST]].sendall(sending_msg)
        return True

    def handle_packet(self, srcif, packet) -> bool:
        """	dispatches a packet """
        typeOfPacket = packet["type"]
        if typeOfPacket == DATA:
            return self.forward(srcif, packet)
        elif typeOfPacket == DUMP:
            return self.dump(packet)
        elif typeOfPacket == UPDT:
            return self.update(srcif, packet)
        elif typeOfPacket == RVKE:
            return self.revoke(packet)
        else:
            return False

    def send_error(self, conn, msg, srcif):
        """ Send a no_route error message """
        message = {}
        message[SRCE] = srcif
        message[DEST] = msg[SRCE]
        message[TYPE] = NRTE
        message[MESG] = {}
        sending_msg = json.dumps(message).encode()
        self.sockets[conn].sendall(sending_msg)

        return True 

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg, srcif)
                else:
                    return

if __name__ == "__main__":
    router = Router(args.asn, args.networks)
    router.run()
